// Breakpoints

$single_col: (max-width 50em + 4em); // 50-60 characters are ideal reading length, + 2em on each side for padding
$double_col: 50em + 4em; // 50-60 characters are ideal reading length, + 2em on each side for padding
$super_wide: 2 * 50em + 4em + 2em;
$double_col_tall: (min-width $double_col)(min-height 570px);

$medium: 35em;

$heightScreen:  100vh; // 100vh = height of screen = 200 meters of ocean

// Modular Scale
$ms-base-value: 15;
$ms-base: $ms-base-value * 1px;
$base-font-size: $ms-base;

// Widths
$maxSegmentCharacters: 102;
$maxSegmentWidth: $maxSegmentCharacters * 1rem;

// Site Colors
$blueFilter: url("../img/blue-filter.svg#seafish");

// Ocean Blues
$abyss: #000c1c;
$midnight: #002351;
$twilight: #0b4a61;
$epipelagic: #007e84;
$surface: #39dbb4;

// Living Blues
$greyLight: #c6f3c7;
$greyMedium: #436c6f;
$greyDark: #12454b;
$black: #06191b;

// Spot Colors
$biolumination: #56fddb;
$red: #c6244b;
$skyLight: #A9DDF2;
$skyMedium: #4ed9f2;

// Firefox-specific Colors
$ffGreen: #14c329;

$base-font-color: color(copy);

$colors: (
  copy: $greyLight,
  altCopy: $abyss,
  titleCopy: $abyss,
  altTitleCopy: $greyDark,
  sky: $skyLight,
  link: $biolumination,
  linkVisited: $skyMedium,
  linkHover: $skyLight,
  linkAlt: $twilight,
  linkAltVisited: $midnight,
  linkAltHover: $epipelagic,
);

// Now, getting colors...
@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn "Unknown `#{$key}` in $color.";
  @return null;
}

// Easings
$easings: (
  In: cubic-bezier(0.55, 0.055, 0.675, 0.19),
  Out: cubic-bezier(0.215, 0.61, 0.355, 1),
  inOut: cubic-bezier(0.645, 0.045, 0.355, 1),
  bounceIn: cubic-bezier(0.6, -0.28, 0.735, 0.045),
  bounceOut: cubic-bezier(0.175, 0.885, 0.32, 1.275),
  bounceInOut: cubic-bezier(0.68, -0.55, 0.265, 1.55)
);

@function ease($key) {
  @if map-has-key($easings, $key) {
    @return map-get($easings, $key);
  }

  @warn "Unknown `#{$key}` in $easings.";
  @return null;
}

// Timings
$durations: (
  fast: 200ms,
  timely: 300ms,
  slow: 500ms,
  slower: 800ms,
  slowest: 1.3s,
  days: 2.1s,
  weeks: 3.4s,
  months: 5.5s,
  years: 8.9s,
  eons: 14.4s,
);

@function duration($key) {
  @if map-has-key($durations, $key) {
    @return map-get($durations, $key);
  }

  @warn "Unknown `#{$key}` in $durations.";
  @return null;
}

/* Animations */
%play-pause {
  animation-play-state: paused !important;
  .in-view & {
    animation-play-state: running !important;
  }
}

$howToHide: opacity duration(days) ease(Out);

%content-hidden {
  opacity: 0;
  transition: $howToHide;
}

%content-revealed {
  opacity: 1;
}

%sprited-thing {
  overflow: hidden;
  position: relative;
  // image that might animate
  &:before {
    content: " ";
    width: 100%;
    height: 100%; // non-animating default
    display: block;
  }
}

//
//  Function to create an optimized svg url
//
@function svg-url($svg){
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode (may need a few extra replacements)
        //
        $chunk: str-replace($chunk,'"','\'');
        $chunk: str-replace($chunk,'<','%3C');
        $chunk: str-replace($chunk,'>','%3E');
        $chunk: str-replace($chunk,'&','%26');
        $chunk: str-replace($chunk,'#','%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index +
            str-length($search)), $search, $replace);
    }
    @return $string;
}
@mixin buttonator($button-color: color(link), $alt-color: color(linkHover), $border-radius: .5em) {
  background: $button-color;
  border-radius: $border-radius;
  color: adjust-lightness($button-color, 50%) !important;
  text-decoration: none;
  padding: $border-radius $border-radius*3;
  transition:
    transform duration(fast) ease(Out),
    background duration(fast) ease(Out),
    color duration(fast) ease(Out);
  &:hover, &:active, &:focus {
    // transform: translate(2px, 2px);
    background: $alt-color;
    color: adjust-lightness($alt-color, 50%) !important;
  }
}

// Retina media queries
@mixin retina {
  @media
    (min-device-pixel-ratio: 2),
    (min-resolution: 192dpi) {
    @content;
  }
}

// Non-retina media queries
@mixin non-retina {
  @media
    (max-device-pixel-ratio: 1),
    (max-resolution: 192dpi) {
    @content;
  }
}

%clearfix:before,
%clearfix:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

%clearfix:after {
    clear: both;
}

%noScroll {
  overflow: hidden;
}

@function calc-em($px) {
  @return ($px/$ms-base-value) * 1em;
}
